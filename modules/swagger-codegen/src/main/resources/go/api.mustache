// DO NOT EDIT: This code is auto-generated from the YAML schema. Any changes made to this file will be lost.
package {{packageName}}

{{#operations}}
import (
	"context"
	"strings"
	"fmt"

	"{{xferPackagePath}}/{{packageName}}"
)

{{#operation}}

{{#hasBodyParam}}
{{#hasPathParams}}
{{! PUT operation }}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
{{#pathParams}} * @param {{paramName}} {{description}}
{{/pathParams}} * @return *{{packageName}}.{{returnType}}
 */
func (c *Client) {{{nickname}}}(ctx context.Context, {{#pathParams}}{{paramName}} string{{/pathParams}}, value *{{packageName}}.{{#bodyParam}}{{dataType}}{{/bodyParam}}) (*{{packageName}}.{{returnType}}, error) {
	var res {{packageName}}.{{returnType}}
	localVarPath := "{{contextPath}}{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	if _, err := c.Put(ctx, localVarPath, value, &res); err != nil {
		return nil, err
	}
	return &res, nil
}
{{/hasPathParams}}
{{^hasPathParams}}
{{#returnType}}
{{#isListContainer}}
{{! POST containing list return type}}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
 * @return *[]{{packageName}}.{{returnBaseType}}
 */
func (c *Client) {{{nickname}}}(ctx context.Context, value *{{packageName}}.{{#bodyParam}}{{dataType}}{{/bodyParam}}) (*[]{{packageName}}.{{returnBaseType}}, error) {
	var res []{{packageName}}.{{returnBaseType}}
	if _, err := c.Post(ctx, "{{contextPath}}{{path}}", value, &res); err != nil {
		return nil, err
	}
	return &res, nil
}
{{/isListContainer}}
{{^isListContainer}}
{{! POST containing single item return type}}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
 * @return *{{packageName}}.{{returnType}}
 */
func (c *Client) {{{nickname}}}(ctx context.Context, value *{{packageName}}.{{#bodyParam}}{{dataType}}{{/bodyParam}}) (*{{packageName}}.{{returnType}}, error) {
	var res {{packageName}}.{{returnType}}
	if _, err := c.Post(ctx, "{{contextPath}}{{path}}", value, &res); err != nil {
		return nil, err
	}
	return &res, nil
}
{{/isListContainer}}
{{/returnType}}
{{^returnType}}
{{! POST without return type}}
func (c *Client) {{{nickname}}}(ctx context.Context, value *{{packageName}}.{{#bodyParam}}{{dataType}}{{/bodyParam}}) error {
	_, err := c.Post(ctx, "{{contextPath}}{{path}}", value, nil)
	return err
}
{{/returnType}}
{{/hasPathParams}}
{{/hasBodyParam}}
{{^hasBodyParam}}
{{#returnType}}
{{#isListContainer}}
{{! GET request to fetch list of resources}}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
 * @return []{{packageName}}.{{returnBaseType}}
 */
func (c *Client) {{{nickname}}}(ctx context.Context) ([]{{packageName}}.{{returnBaseType}}, context.Context, error) {
	var res []{{packageName}}.{{returnBaseType}}
	ctx, err := c.Get(ctx, "{{contextPath}}{{path}}", nil, &res)
	if err != nil {
		return nil, ctx, err
	}
	return res, ctx, nil
}
{{/isListContainer}}
{{^isListContainer}}
{{! GET request to fetch a single resource}}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
{{#pathParams}} * @param {{paramName}} {{description}}
{{/pathParams}} * @return *{{packageName}}.{{returnType}}
 */
func (c *Client) {{{nickname}}}(ctx context.Context, {{#pathParams}}{{paramName}} string{{/pathParams}}) (*{{packageName}}.{{returnType}}, error) {
	var res {{packageName}}.{{returnType}}
	localVarPath := "{{contextPath}}{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	if _, err := c.Get(ctx, localVarPath, nil, &res); err != nil {
		return nil, err
	}
	return &res, nil
}
{{/isListContainer}}
{{/returnType}}
{{^returnType}}
{{! DELETE resources}}
/**
 * {{notes}}
 *
 * ctx: Context containing meta-info for the request.
 */
func (c *Client) {{{nickname}}}(ctx context.Context, {{#pathParams}}{{paramName}} string{{/pathParams}}) error {
	localVarPath := "{{contextPath}}{{path}}"{{#pathParams}}
	localVarPath = strings.Replace(localVarPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	_, err := c.Delete(ctx, localVarPath, nil, nil)
	return err
}
{{/returnType}}
{{/hasBodyParam}}
{{/operation}}{{/operations}}
